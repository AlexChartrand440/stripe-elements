{"version":3,"file":"stripe-elements.stories-a3978738.js","sources":["../../stories/stripe-elements.stories.mdx"],"sourcesContent":["import { Story, Preview, Meta, Props } from '@open-wc/demoing-storybook';\nimport { html } from 'lit-html';\n\nimport '@material/mwc-textfield'\nimport '@material/mwc-button';\n\nimport '../src/stripe-elements.js';\nimport '@power-elements/json-viewer';\n\nimport { $, $$, setPublishableKey } from './helpers.js';\n\n<Meta title=\"Stripe Elements\" />\n\n# Stripe Elements Web Component\n\nThe `<stripe-elements>` custom element is an easy way to use stripe.js in your web app.\nTo get started, add the element to your page with the `publishable-key` attribute set to your\n[Stripe publishable key](https://dashboard.stripe.com/account/apikeys). You can also set the `publishableKey` DOM property using JavaScript\n\n```html\n<stripe-elements publishable-key=\"my-pk\"></stripe-elements>\n```\n```html\n<stripe-elements></stripe-elements>\n<script>\n $('stripe-elements').publishableKey = 'my-pk';\n</script>\n```\n\n**Careful!** never add your **secret key** to an HTML page, only publish your **publishable key**.\n\nOnce you've set the `publishable-key` attribute (or the `publishableKey` DOM property), Stripe will create a Stripe Card Element on your page.\n\nEnter your publishable key here (use the test key, not the production key) to run the examples against your Stripe account.\n\n<Preview>\n  <Story name=\"Enter a Stripe Publishable Key\">\n    {html`\n      <mwc-textfield style=\"width: 100%\" outlined label=\"Publishable Key\" value=\"dummy-key\" @change=\"${setPublishableKey}\"></mwc-textfield>\n    `}\n  </Story>\n</Preview>\n\n## Create a Token\n\nOnce you're set your publishable key and Stripe has instantiated (listen for the `stripe-ready` event if you need to know exactly when this happens),\nyou may generate a token from the filled-out form by calling the `createToken()` method.\n\n<Preview withToolbar>\n  <Story name=\"Generate a Token\" height=\"60px\">\n    {\n      () => {\n        const viewer = $('#token-viewer');\n        const onStripeToken = ({ detail: token }) => viewer.object = token;\n        const onClick = () => $('#token stripe-elements').createToken();\n        return html`\n          <section id=\"token\">\n            <stripe-elements publishable-key=\"dummy-key\" @stripe-token=\"${onStripeToken}\"></stripe-elements>\n            <mwc-button class=\"generate\" outlined @click=\"${onClick}\">Generate Token</mwc-button>\n          </section>\n        `;\n      }\n    }\n  </Story>\n</Preview>\n\n<json-viewer id=\"token-viewer\"></json-viewer>\n\n## Create a Source\n\n<Preview withToolbar>\n  <Story name=\"Generate a Source\" height=\"500px\">\n    {\n      () => {\n        const onStripeSource = ({ detail: source }) => $('#source-viewer').object = source;\n        const getInputs = () => [...($('#source').querySelectorAll('mwc-textfield'))];\n        const getCardData = () => getInputs().reduce((data, { value, dataset: { ownerProp } }) => ({ ...data, [ownerProp]: value }), { });\n        const onClick = () => $('#source stripe-elements').createSource({ type: 'card', owner: getCardData() });\n        return html`\n        <section id=\"source\">\n          <stripe-elements id=\"source-element\" publishable-key=\"dummy-key\" @stripe-source=\"${onStripeSource}\"></stripe-elements>\n          <mwc-textfield outlined label=\"Cardholder Name\" data-owner-prop=\"name\"></mwc-textfield>\n          <mwc-textfield outlined label=\"Cardholder Email\" data-owner-prop=\"email\"></mwc-textfield>\n          <mwc-textfield outlined label=\"Cardholder Phone\" data-owner-prop=\"phone\"></mwc-textfield>\n          <mwc-button outlined @click=\"${onClick}\">Generate Source</mwc-button>\n        </section>\n        `;\n      }\n    }\n  </Story>\n</Preview>\n\n<json-viewer id=\"source-viewer\"></json-viewer>\n\n## Validation\n\n`<stripe-elements>` comes with several properties, events, and methods for validation.\nListen for the\n`is-complete-changed`,\n`is-empty-changed`, and\n`has-error-changed` events\nand check the `isComplete`, `isEmpty`, and `hasError` properties to react to validation changes.\nThese properties [reflect](https://dev.to/bennypowers/lets-build-web-components-part-5-litelement-906#reflecting-properties-to-attributes) to their dash-cased attributes,\nso you can use CSS to style your element in its various states.\n\n```css\nstripe-elements[is-empty] { border: 1px solid rebeccapurple; }\nstripe-elements[is-complete] { border: 1px solid blue; }\nstripe-elements[has-error] { border: 1px solid red; }\n```\n\n<Preview withToolbar>\n  <Story name=\"Validation States\" height=\"60px\">\n    {() => {\n      const onClick = () => $('#states stripe-elements').validate();\n      return html`\n      <style>\n        stripe-elements { border-radius: 4px; }\n        stripe-elements[is-empty] { border: 1px solid rebeccapurple; }\n        stripe-elements[is-complete] { border: 1px solid blue; }\n        stripe-elements[has-error] { border: 1px solid red; }\n      </style>\n      <section id=\"states\">\n        <stripe-elements publishable-key=\"dummy-key\"></stripe-elements>\n        <mwc-button class=\"generate\" outlined @click=\"${onClick}\">Validate</mwc-button>\n      </section>\n      `;\n    }}\n  </Story>\n</Preview>\n\n## Simple Validation\n\n`<stripe-elements>` has a `show-error` boolean attribute which will display the error message for you.\nThis is useful for simple validation in cases where you don't need to build your own validation UI.\n\n<Preview withToolbar>\n  <Story name=\"Error Display\" height=\"60px\">\n    {\n      () => {\n        const onClick = () => $('#should-error').validate();\n        return html`\n        <section id=\"show-errror\">\n          <stripe-elements id=\"should-error\" publishable-key=\"should-error-use-bad-key\" show-error></stripe-elements>\n          <mwc-button class=\"generate\" outlined @click=\"${onClick}\">Validate</mwc-button>\n        </section>\n        `;\n      }\n    }\n  </Story>\n</Preview>\n\nFor more complex needs, you can listen for the `stripe-error` event.\n\n## API\n\n<Props of=\"stripe-elements\" />\n"],"names":["require","layoutProps","MDXLayout","MDXContent","components","props","mdxType","_demoingStorybook","title","parentName","name","html","setPublishableKey","withToolbar","height","viewer","token","detail","object","createToken","id","getCardData","querySelectorAll","reduce","data","value","ownerProp","dataset","source","createSource","type","owner","validate","of","isMDXComponent","enterAStripePublishableKey","story","parameters","mdxSource","generateAToken","generateASource","validationStates","errorDisplay","componentMeta","includeStories","mdxStoryNameToId","docs","page","_preview"],"mappings":"4oHACM,0LAONA,mCACAA,gCACAA,qCACAA,uCACA,6OAOA,IAAMC,EAAc,GAGdC,EAAY,UAClB,SAASC,SACPC,IAAAA,WACGC,6BAEI,SAACH,OAAcD,EAAiBI,GAAOD,WAAYA,EAAYE,QAAQ,eAK5E,SAACC,QAAKC,MAAM,kBAAkBF,QAAQ,UACtC,qDACA,0BAAW,uBAAYG,WAAW,sJACkB,uBAAYA,WAAW,oDAC7E,gBAAGA,WAAW,KAAQ,MACR,sGACkD,uBAAYA,WAAW,0DACrF,qBAAK,mBAAMA,WAAW,OAAU,WACf,qFAGjB,qBAAK,mBAAMA,WAAW,OAAU,WACf,oIAMjB,mBAAG,mBAAQA,WAAW,qCAA6C,mBAAQA,WAAW,2DAAmE,mBAAQA,WAAW,8BAC5K,0CAA2B,uBAAYA,WAAW,+CAA2D,uBAAYA,WAAW,kGACpI,kJACA,SAACF,WAAQD,QAAQ,YACnB,SAACC,SAAMG,KAAK,iCAAiCJ,QAAQ,SAClDK,WACkGC,wBAInG,sCACA,uGAAwF,uBAAYH,WAAW,kJAChD,uBAAYA,WAAW,mCACtF,SAACF,WAAQM,eAAYP,QAAQ,YAC/B,SAACC,SAAMG,KAAK,mBAAmBI,OAAO,OAAOR,QAAQ,UAClD,eACWS,GAAS,OAAE,wBAQVJ,YANe,gBACZK,IAARC,cACIF,EAAOG,OAASF,KAEN,kBAAM,OAAE,0BAA0BG,sBAWxD,mBAAG,wBAAaC,GAAG,mBACnB,uCACA,SAACb,WAAQM,eAAYP,QAAQ,YAC/B,SAACC,SAAMG,KAAK,oBAAoBI,OAAO,QAAQR,QAAQ,UACpD,eAOWe,EAAc,qBAFQ,OAAE,WAAWC,iBAAiB,kBAEpBC,QAAO,SAACC,SAC5CC,IAAAA,MAEEC,IADFC,QACED,sBAEQF,OACTE,EAAYD,MACX,YAOGd,YApBgB,gBACbiB,IAARX,cACI,OAAE,kBAAkBC,OAASU,KAanB,kBAAM,OAAE,2BAA2BC,aAAa,CAC9DC,KAAM,OACNC,MAAOV,cAef,mBAAG,wBAAaD,GAAG,oBACnB,kCACA,mBAAG,uBAAYX,WAAW,mHAE5B,uBAAYA,WAAW,mCACvB,uBAAYA,WAAW,oCACvB,uBAAYA,WAAW,qDACT,uBAAYA,WAAW,yBAAqC,uBAAYA,WAAW,0BAAsC,uBAAYA,WAAW,mFAC7I,gBAAGA,WAAW,KAAQ,MACzB,oOAGZ,qBAAK,mBAAMA,WAAW,OAAU,WACf,wMAKjB,SAACF,WAAQM,eAAYP,QAAQ,YAC/B,SAACC,SAAMG,KAAK,oBAAoBI,OAAO,OAAOR,QAAQ,UACnD,kBAGYK,YAFS,kBAAM,OAAE,2BAA2BqB,mBAiBzD,yCACA,mBAAG,uBAAYvB,WAAW,qCAAiD,uBAAYA,WAAW,6LAElG,SAACF,WAAQM,eAAYP,QAAQ,YAC/B,SAACC,SAAMG,KAAK,gBAAgBI,OAAO,OAAOR,QAAQ,UAC/C,kBAGYK,YAFS,kBAAM,OAAE,iBAAiBqB,mBAW/C,qEAAsD,uBAAYvB,WAAW,iCAC7E,2BACA,SAACF,SAAM0B,GAAG,kBAAkB3B,QAAQ,WAKxCH,EAAW+B,gBAAiB,EAErB,IAAMC,GAA6B,iBAAYxB,WACiDC,2DAEvGuB,EAA2BC,MAAQ,GACnCD,EAA2BC,MAAM1B,KAAO,iCACxCyB,EAA2BC,MAAMC,WAAa,CAAEC,UAAW,6JAEpD,IAAMC,GAAiB,kBAAY,eAClCxB,GAAS,OAAE,wBAQVJ,YANe,gBACZK,IAARC,cACIF,EAAOG,OAASF,KAEN,kBAAM,OAAE,0BAA0BG,6CASpDoB,EAAeH,MAAQ,GACvBG,EAAeH,MAAM1B,KAAO,mBAC5B6B,EAAeH,MAAMC,WAAa,CAAEC,UAAW,ofAExC,IAAME,GAAkB,kBAAY,eAOnCnB,EAAc,qBAFQ,OAAE,WAAWC,iBAAiB,kBAEpBC,QAAO,SAACC,SAC5CC,IAAAA,MAEEC,IADFC,QACED,sBAEQF,OACTE,EAAYD,MACX,YAOGd,YApBgB,gBACbiB,IAARX,cACI,OAAE,kBAAkBC,OAASU,KAanB,kBAAM,OAAE,2BAA2BC,aAAa,CAC9DC,KAAM,OACNC,MAAOV,sCAaXmB,EAAgBJ,MAAQ,GACxBI,EAAgBJ,MAAM1B,KAAO,oBAC7B8B,EAAgBJ,MAAMC,WAAa,CAAEC,UAAW,6jCAEzC,IAAMG,GAAmB,kBAAY,kBAGnC9B,YAFS,kBAAM,OAAE,2BAA2BqB,4CAerDS,EAAiBL,MAAQ,GACzBK,EAAiBL,MAAM1B,KAAO,oBAC9B+B,EAAiBL,MAAMC,WAAa,CAAEC,UAAW,wlBAE1C,IAAMI,GAAe,kBAAY,kBAG/B/B,YAFS,kBAAM,OAAE,iBAAiBqB,wCAS3CU,EAAaN,MAAQ,GACrBM,EAAaN,MAAM1B,KAAO,gBAC1BgC,EAAaN,MAAMC,WAAa,CAAEC,UAAW,gXAE7C,IAAMK,EAAgB,CAAEnC,MAAO,kBAAmBoC,eAAgB,CAAC,6BAA6B,iBAAiB,kBAAkB,mBAAmB,iBAEhJC,EAAmB,kCAAkC,qEAAqE,wDAAwD,yDAAyD,qDAAqD,kCAEtSF,EAAcN,WAAaM,EAAcN,YAAc,GACvDM,EAAcN,WAAWS,UACnBH,EAAcN,WAAWS,MAAQ,IACrCC,KAAM,kBAAM,SAACC,cAAWH,iBAAkBA,IAAkB,SAAC1C,kBAGhDwC"}