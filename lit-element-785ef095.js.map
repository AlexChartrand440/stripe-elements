{"version":3,"file":"lit-element-785ef095.js","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/decorators.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_toArray","arr","Array","isArray","arrayWithHoles","iter","Symbol","iterator","prototype","toString","call","from","iterableToArray","TypeError","nonIterableRest","window","JSCompiler_renameProperty","prop","_obj","defaultConverter","[object Object]","type","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","HTMLElement","_updateState","_instanceProperties","undefined","_updatePromise","_hasConnectedResolver","_changedProperties","Map","_reflectingProperties","initialize","finalize","attributes","_classProperties","forEach","v","p","attr","this","_attributeNameForProperty","_attributeToPropertyMap","set","push","hasOwnProperty","superProperties","getPrototypeOf","k","name","options","_ensureClassProperties","noAccessor","oldValue","_requestUpdate","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","toLowerCase","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","get","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","has","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","e","_hasConnected","result","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","customElement","tagName","classOrDescriptor","clazz","customElements","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","element","placement","initializer","assign","property","protoOrDescriptor","proto","legacyProperty","query","selector","renderRoot","querySelector","legacyQuery","standardQuery","eventOptions","legacyEventOptions","standardEventOptions","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","Error","_styleSheet","replaceSync","css","strings","values","reduce","acc","idx","textFromCSSResult","flattenStyles","styles","flat","Infinity","arrayFlat","i","length","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","s","add","Set","unshift","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","ShadyCSS","nativeShadow","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","hasUpdated","styleElement","templateResult","render","TemplateResult","scopeName","eventContext","style","document","createElement","textContent","appendChild"],"mappings":"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"}