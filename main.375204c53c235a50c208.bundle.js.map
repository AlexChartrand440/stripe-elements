{"version":3,"file":"main.375204c53c235a50c208.bundle.js","sources":["webpack:///./README.md","webpack:///./stories/index.stories.js","webpack:///./src/StripeElements.js"],"sourcesContent":["module.exports = \"[![Published on webcomponents.org](https://img.shields.io/badge/webcomponents.org-published-blue.svg)](https://www.webcomponents.org/element/bennypowers/stripe-elements)\\n[![Published on npm](https://img.shields.io/npm/v/@power-elements/stripe-elements.svg)](https://www.npmjs.com/package/@power-elements/stripe-elements)\\n[![Contact me on Codementor](https://cdn.codementor.io/badges/contact_me_github.svg)](https://www.codementor.io/bennyp?utm_source=github&utm_medium=button&utm_term=bennyp&utm_campaign=github)\\n[![Maintainability](https://api.codeclimate.com/v1/badges/b2205a301b0a8bb82d51/maintainability)](https://codeclimate.com/github/bennypowers/stripe-elements/maintainability)\\n[![Test Coverage](https://api.codeclimate.com/v1/badges/b2205a301b0a8bb82d51/test_coverage)](https://codeclimate.com/github/bennypowers/stripe-elements/test_coverage)\\n[![CircleCI](https://circleci.com/gh/bennypowers/stripe-elements.svg?style=svg)](https://circleci.com/gh/bennypowers/stripe-elements)\\n\\n# `<stripe-elements>`\\n\\nCustom element wrapper for Stripe.js v3 Elements that works in shadow DOM. Creates a `card` element √† la https://stripe.com/docs/elements\\n\\nüë®‚Äçüé® [Storybook Demo](https://bennypowers.dev/stripe-elements) üëÄ\\n\\n## Installation\\n```\\nnpm i -S @power-elements/stripe-elements\\nnpx @pika/web\\n```\\n\\n## Usage\\nYou should make sure to load stripe.js on your app's index.html, as per Stripe's recommendation, before loading `<stripe-elements>`. If `window.Stripe` is not available when you load up the component, it will fail with a reasonably-polite console warning.\\n\\n```html\\n<script src=\\\"https://js.stripe.com/v3/\\\"></script>\\n```\\n\\nThen you can add the element to your page.\\n\\n```html\\n<script type=\\\"module\\\" src=\\\"/web_modules/@power-elements/stripe-elements/stripe-elements.js\\\"></script>\\n<stripe-elements id=\\\"stripe\\\" action=\\\"/payment\\\"></stripe-elements>\\n<button id=\\\"submit\\\" disabled>Submit</button>\\n<script>\\n  submit.onclick = () => stripe.validate() && stripe.submit();\\n  stripe.addEventListener('change', function onChange() {\\n    button.disabled = !this.validate()\\n  })\\n</script>\\n```\\n\\nIn a lit-html template\\n\\n```js\\nimport { html, render } from '/web_modules/lit-html/lit-html.js';\\nimport { PUBLISHABLE_KEY } from './config.js';\\nimport '/web_modules/@power-elements/stripe-elements/stripe-elements.js';\\n\\nconst onChange = ({ target: { isComplete, hasError } }) => {\\n  document.body.querySelector('button').disabled = !(isComplete && !hasError)\\n}\\n\\nconst onClick = () => document.getElementById('stripe').submit();\\n\\nconst template = html`\\n  <button disabled @click=\\\"${onClick}\\\">Get Token</button>\\n  <stripe-elements id=\\\"stripe\\\"\\n      @stripe-change=\\\"${onChange}\\\"\\n      publishable-key=\\\"${PUBLISHABLE_KEY}\\\"\\n      action=\\\"/payment\\\"\\n  ></stripe-elements>\\n`\\nrender(template, document.body)\\n```\\n\\nIn a Polymer Template\\n\\n```html\\n<paper-input label=\\\"Stripe Publishable Key\\\" value=\\\"{{key}}\\\"></paper-input>\\n\\n<stripe-elements id=\\\"stripe\\\"\\n    stripe-ready=\\\"{{ready}}\\\"\\n    publishable-key=\\\"[[key]]\\\"\\n    token=\\\"{{token}}\\\"\\n></stripe-elements>\\n\\n<paper-button id=\\\"submit\\\"\\n    disabled=\\\"[[!ready]]\\\"\\n    onclick=\\\"stripe.submit()\\\">\\n  Get Token\\n</paper-button>\\n\\n<paper-toast\\n    opened=\\\"[[token]]\\\"\\n    text=\\\"Token received for üí≥ [[token.card.last4]]! ü§ë\\\"\\n></paper-toast>\\n```\\n\\n## Styling\\n\\nA word about nomenclature before we list custom properties and mixins. Stripe v3\\nIntroduces 'Stripe Elements'. These are not custom elements, but rather forms\\nhosted by stripe and injected into your page via an iFrame. When we refer to the\\n'Stripe Element' in this document, we are referring to the hosted Stripe form,\\nnot the `<stripe-element>` custom element. But when I mentions the 'element', I mean the custom element.\\n\\nThe following custom properties are available for styling the `<stripe-elements>` component:\\n\\n| Custom property | Description | Default |\\n| --- | --- | --- |\\n| `--stripe-elements-width` | Min-width of the element | `300px` |\\n| `--stripe-elements-height` | Min-width of the element | `50px` |\\n| `--stripe-elements-element-padding` | Padding for the element | `14px` |\\n| `--stripe-elements-element-background` | Background for the element | `initial` |\\n\\nWhen you apply CSS to the custom properties below, they're parsed and sent to Stripe, who should apply them to the Stripe Element they return in the iFrame.  \\n\\n- `base` styles are inherited by all other variants.  \\n- `complete` styles are applied when the Stripe Element has valid input.  \\n- `empty` styles are applied when the Stripe Element has no user input.  \\n- `invalid` styles are applied when the Stripe Element has invalid input.\\n\\nThere are 11 properties for each state that you can set which will be read into the Stripe Element iFrame:\\n\\n- `--stripe-elements-base-color`\\n- `--stripe-elements-base-font-family`\\n- `--stripe-elements-base-font-size`\\n- `--stripe-elements-base-font-smoothing`\\n- `--stripe-elements-base-font-variant`\\n- `--stripe-elements-base-icon-color`\\n- `--stripe-elements-base-line-height`\\n- `--stripe-elements-base-letter-spacing`\\n- `--stripe-elements-base-text-decoration`\\n- `--stripe-elements-base-text-shadow`\\n- `--stripe-elements-base-text-transform`\\n\\nand likewise `--stripe-elements-complete-color`, etc.\\n\"","\n  export var withStorySource = require('@storybook/addon-storysource').withStorySource;\n  export var __STORY__ = \"import { storiesOf, html, withKnobs, withClassPropertiesKnobs } from '@open-wc/demoing-storybook';\\nimport { color, number, select, text } from '@storybook/addon-knobs';\\nimport { action } from '@storybook/addon-actions';\\n\\nimport compose from 'crocks/helpers/compose';\\nimport propOr from 'crocks/helpers/propOr';\\n\\nimport { StripeElements } from '../src/StripeElements.js';\\nimport '../src/stripe-elements.js';\\n\\nimport readme from '../README.md';\\n\\nconst getDetail = propOr(null, 'detail');\\nconst getValue = propOr(null, 'value');\\nconst getError = propOr(null, 'error');\\n\\nstoriesOf('stripe-elements', module)\\n  .addDecorator(withKnobs)\\n  .add(\\n    'iFrame Styles and Events',\\n    () => html`\\n      <style>\\n        aside {\\n          font-size: 18px;\\n          font-style: italic;\\n        }\\n        html {\\n          --stripe-elements-width: ${number('Width', 500, { range: true, min: 50, max: 1000 }, 'Element Styles')}px;\\n          --stripe-elements-height: ${number('Height', 40, { range: true, min: 10, max: 200 }, 'Element Styles')}px;\\n          --stripe-elements-element-padding: ${number(\\n            'Padding',\\n            4,\\n            { range: true, min: 0, max: 100 },\\n            'Element Styles'\\n          )}px;\\n          --stripe-elements-element-background: ${color('Background', '#ffffff', 'Element Styles')};\\n          --stripe-elements-base-color: ${color('Color', '#000000', 'iFrame Styles')};\\n          --stripe-elements-base-font-family: ${text('Font Family', 'Fira Code', 'iFrame Styles')};\\n          --stripe-elements-base-font-size: ${number(\\n            'Font Size',\\n            14,\\n            { range: true, min: 8, max: 144 },\\n            'iFrame Styles'\\n          )}px;\\n          --stripe-elements-base-icon-color: ${color('Icon Color', '#000000', 'iFrame Styles')};\\n          --stripe-elements-base-letter-spacing: ${number(\\n            'Letter Spacing',\\n            0,\\n            { range: true, min: -2, max: 20 },\\n            'iFrame Styles'\\n          )}px;\\n          --stripe-elements-base-text-decoration: ${select(\\n            'Text Decoration',\\n            ['none', 'underline', 'underline wavy green', 'strike-through'],\\n            'none',\\n            'iFrame Styles'\\n          )};\\n          --stripe-elements-base-text-shadow: ${text('Text Shadow', '0 0 2px lightgrey', 'iFrame Styles')};\\n          --stripe-elements-base-text-transform: ${text('Text Transform', 'uppercase', 'iFrame Styles')};\\n        }\\n      </style>\\n      <stripe-elements\\n        publishable-key=\\\"${text('Publishable Key', 'pk_test_XXXXXXXXXXXXXXXXXXXXXXXX')}\\\"\\n        @stripe-ready=\\\"${action('stripe-ready')}\\\"\\n        @stripe-change=\\\"${compose(\\n          action('stripe-change'),\\n          getDetail\\n        )}\\\"\\n        @stripe-token=\\\"${compose(\\n          action('stripe-token'),\\n          getDetail\\n        )}\\\"\\n        @stripe-error=\\\"${compose(\\n          action('stripe-error'),\\n          getError\\n        )}\\\"\\n        @brand-changed=\\\"${compose(\\n          action('brand-changed'),\\n          getValue,\\n          getDetail\\n        )}\\\"\\n        @card-changed=\\\"${compose(\\n          action('card-changed'),\\n          getValue,\\n          getDetail\\n        )}\\\"\\n        @publishable-key-changed=\\\"${compose(\\n          action('publishable-key-changed'),\\n          getValue,\\n          getDetail\\n        )}\\\"\\n        @is-empty-changed=\\\"${compose(\\n          action('is-empty-changed'),\\n          getValue,\\n          getDetail\\n        )}\\\"\\n        @is-complete-changed=\\\"${compose(\\n          action('is-complete-changed'),\\n          getValue,\\n          getDetail\\n        )}\\\"\\n        @has-error-changed=\\\"${compose(\\n          action('has-error-changed'),\\n          getValue,\\n          getDetail\\n        )}\\\"\\n      ></stripe-elements>\\n      <aside>Apply Your iFrame Styles by Resetting the Publishable Key in the Knobs Panel.</aside>\\n    `,\\n    { notes: { markdown: readme } }\\n  )\\n  .add('Documentation', () => withClassPropertiesKnobs(StripeElements), { notes: { markdown: readme } });\\n\";\n  export var __ADDS_MAP__ = {\"stripe-elements--documentation\":{\"startLoc\":{\"col\":7,\"line\":112},\"endLoc\":{\"col\":103,\"line\":112}},\"stripe-elements--iframe-styles-and-events\":{\"startLoc\":{\"col\":4,\"line\":20},\"endLoc\":{\"col\":35,\"line\":110}}};\n  \n  import { storiesOf, html, withKnobs, withClassPropertiesKnobs } from '@open-wc/demoing-storybook';\nimport { color, number, select, text } from '@storybook/addon-knobs';\nimport { action } from '@storybook/addon-actions';\n\nimport compose from 'crocks/helpers/compose';\nimport propOr from 'crocks/helpers/propOr';\n\nimport { StripeElements } from '../src/StripeElements.js';\nimport '../src/stripe-elements.js';\n\nimport readme from '../README.md';\n\nconst getDetail = propOr(null, 'detail');\nconst getValue = propOr(null, 'value');\nconst getError = propOr(null, 'error');\n\nstoriesOf('stripe-elements', module).addDecorator(withStorySource(__STORY__, __ADDS_MAP__))\n  .addDecorator(withKnobs)\n  .add(\n    'iFrame Styles and Events',\n    () => html`\n      <style>\n      aside {\n        font-size: 18px;\n        font-style: italic;\n      }\n      html {\n        --stripe-elements-width: ${number('Width', 500, { range: true, min: 50, max: 1000 }, 'Element Styles')}px;\n        --stripe-elements-height: ${number('Height', 40, { range: true, min: 10, max: 200 }, 'Element Styles')}px;\n        --stripe-elements-element-padding: ${number('Padding', 4, { range: true, min: 0, max: 100 }, 'Element Styles')}px;\n        --stripe-elements-element-background: ${color('Background', '#ffffff', 'Element Styles')};\n        --stripe-elements-base-color: ${color('Color', '#000000', 'iFrame Styles')};\n        --stripe-elements-base-font-family: ${text('Font Family', 'Fira Code', 'iFrame Styles')};\n        --stripe-elements-base-font-size: ${number('Font Size', 14, { range: true, min: 8, max: 144 }, 'iFrame Styles')}px;\n        --stripe-elements-base-icon-color: ${color('Icon Color', '#000000', 'iFrame Styles')};\n        --stripe-elements-base-letter-spacing: ${number('Letter Spacing', 0, { range: true, min: -2, max: 20 }, 'iFrame Styles')}px;\n        --stripe-elements-base-text-decoration: ${select('Text Decoration', ['none', 'underline', 'underline wavy green', 'strike-through'], 'none', 'iFrame Styles')};\n        --stripe-elements-base-text-shadow: ${text('Text Shadow', '0 0 2px lightgrey', 'iFrame Styles')};\n        --stripe-elements-base-text-transform: ${text('Text Transform', 'uppercase', 'iFrame Styles')};\n      }\n      </style>\n      <stripe-elements\n          publishable-key=\"${text('Publishable Key', 'pk_test_XXXXXXXXXXXXXXXXXXXXXXXX')}\"\n          @stripe-ready=\"${action('stripe-ready')}\"\n          @stripe-change=\"${compose(action('stripe-change'), getDetail)}\"\n          @stripe-token=\"${compose(action('stripe-token'), getDetail)}\"\n          @stripe-error=\"${compose(action('stripe-error'), getError)}\"\n          @brand-changed=\"${compose(action('brand-changed'), getValue, getDetail)}\"\n          @card-changed=\"${compose(action('card-changed'), getValue, getDetail)}\"\n          @publishable-key-changed=\"${compose(action('publishable-key-changed'), getValue, getDetail)}\"\n          @is-empty-changed=\"${compose(action('is-empty-changed'), getValue, getDetail)}\"\n          @is-complete-changed=\"${compose(action('is-complete-changed'), getValue, getDetail)}\"\n          @has-error-changed=\"${compose(action('has-error-changed'), getValue, getDetail)}\"\n      ></stripe-elements>\n      <aside>Apply Your iFrame Styles by Resetting the Publishable Key in the Knobs Panel.</aside>\n    `, { notes: { markdown: readme } })\n  .add('Documentation', () =>\n    withClassPropertiesKnobs(StripeElements), { notes: { markdown: readme } });\n\n  ","import { LitElement, html, css } from 'lit-element';\nimport { render } from 'lit-html';\nimport { ifDefined } from 'lit-html/directives/if-defined';\n\nconst bubbles = true;\nconst composed = true;\n\nconst removeEl = el => {\n  /* istanbul ignore if */\n  if(el instanceof Element) el.remove();\n}\n\n/* istanbul ignore next */\nconst removeAllMounts = host =>\n  host.querySelectorAll('[slot=\"stripe-card\"][name=\"stripe-card\"]')\n    .forEach(removeEl)\n\nfunction appendTemplate(template, target) {\n  const tmp = document.createElement('div');\n  render(template, tmp);\n  const { firstElementChild } = tmp;\n  target.appendChild(firstElementChild);\n  tmp.remove();\n  return firstElementChild;\n}\n\nconst stripeElementsCustomCssProperties = html`\n<style id=\"stripe-elements-custom-css-properties\">\n.StripeElement {\n  background-color: white;\n  padding: 8px 12px;\n  border-radius: 4px;\n  border: 1px solid transparent;\n  box-shadow: 0 1px 3px 0 #e6ebf1;\n  -webkit-transition: box-shadow 150ms ease;\n  transition: box-shadow 150ms ease;\n  min-width: var(--stripe-elements-width, 300px);\n  padding: var(--stripe-elements-element-padding, 14px);\n  background: var(--stripe-elements-element-background, initial);\n}\n\n.StripeElement--focus {\n  box-shadow: 0 1px 3px 0 #cfd7df;\n}\n\n.StripeElement--invalid {\n  border-color: #fa755a;\n}\n\n.StripeElement--webkit-autofill {\n  background-color: #fefde5 !important;\n}\n</style>\n`;\n\nconst style = css`\n:host {\n  display: block;\n  flex: 1;\n  min-width: var(--stripe-elements-width, 300px);\n  min-height: var(--stripe-elements-height, 50px);\n}\n`;\n\nconst stripeCardTemplate = ({ action, id, token }) => html`\n<div slot=\"stripe-card\">\n  <form action=\"${ifDefined(action || undefined)}\" method=\"post\">\n    <div id=\"${id}\" aria-label=\"Credit or Debit Card\"></div>\n    <input type=\"hidden\" name=\"stripeToken\" value=\"${ifDefined(token || undefined)}\">\n  </form>\n</div>\n`;\n\nconst allowedStyles = [\n  'color',\n  'fontFamily',\n  'fontSize',\n  'fontStyle',\n  'fontSmoothing',\n  'fontVariant',\n  'iconColor',\n  'lineHeight',\n  'letterSpacing',\n  'textDecoration',\n  'textShadow',\n  'textTransform',\n];\n\n/**\n * Generates a random mount point (UUID v4) for Stripe Elements. This will allow multiple\n * Elements forms to be embedded on a single page.\n * @return {String} mount element id\n */\nfunction generateRandomMountElementId() {\n  return `stripe-elements-mount-point-${([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n  )}`;\n}\n\n/**\n * `stripe-elements`\n * Custom element wrapper for Stripe.js v3 Elements\n *\n * ## Usage\n *\n * ```html\n *   <label>Stripe Publishable Key <input id=\"pubkey\"/></label>\n *   <stripe-elements id=\"stripe\"></stripe-elements>\n *   <script>\n *     const onKey = ({ target: { value } })) => stripe.publishableKey = value;\n *     const onToken = ({ detail: token })) => console.log(token);\n *     pubkey.addEventListener('change', onKey);\n *     stripe.addEventListener('stripe-token', onToken);\n *   </script>\n * ```\n *\n * ## Styling\n *\n * A word about nomenclature before we list custom properties and mixins.\n * Stripe v3 Introduces 'Stripe Elements'. These are not custom elements,\n * but rather forms hosted by stripe and injected into your page via an iFrame.\n * When we refer to the 'Stripe Element' in this document, we are referring\n * to the hosted Stripe form, not the `<stripe-element>` custom element.\n *\n * The following custom properties are available for styling the `<stripe-elements>` component:\n *\n * | Custom property | Description | Default |\n * | --- | --- | --- |\n * | `--stripe-elements-width` | Min-width of the stripe-element | `300px` |\n * | `--stripe-elements-height` | Min-width of the stripe-element | `50px` |\n * | `--stripe-elements-element-padding` | Padding for the stripe-element | `14px`;\n * | `--stripe-elements-element-background | Background for the stripe-element | `initial` |\n *\n * When you apply CSS to the custom properties below, they're parsed and sent to Stripe, who should apply them to the Stripe Element they return in the iFrame.\n *\n * - `base` styles are inherited by all other variants.\n * - `complete` styles are applied when the Stripe Element has valid input.\n * - `empty` styles are applied when the Stripe Element has no user input.\n * - `invalid` styles are applied when the Stripe Element has invalid input.\n *\n * There are 11 properties for each state that you can set which will be read into the Stripe Element iFrame:\n *\n * - `--stripe-elements-base-color`\n * - `--stripe-elements-base-font-family`\n * - `--stripe-elements-base-font-size`\n * - `--stripe-elements-base-font-smoothing`\n * - `--stripe-elements-base-font-variant`\n * - `--stripe-elements-base-icon-color`\n * - `--stripe-elements-base-line-height`\n * - `--stripe-elements-base-letter-spacing`\n * - `--stripe-elements-base-text-decoration`\n * - `--stripe-elements-base-text-shadow`\n * - `--stripe-elements-base-text-transform`\n *\n * and likewise `--stripe-elements-complete-color`, etc.\n * @demo demo/index.html\n * @polymer\n * @customElement\n * @extends LitElement\n * @fires 'stripe-token'\n * @fires 'stripe-error'\n */\nexport class StripeElements extends LitElement {\n  static is = 'stripe-elements';\n\n  static properties = {\n    /**\n     * The URL to the morm action. Example '/charges'.\n     * If blank or undefined will not submit charges immediately.\n     */\n    action: { type: String },\n\n    /**\n     * The card brand detected by Stripe\n     * @type {String}\n     * @readonly\n     */\n    brand: { type: String },\n\n    /**\n     * Reference to the Stripe card.\n     * @type {Object}\n     * @readonly\n     */\n    card: { type: Object },\n\n    /**\n     * Card billing info to be passed to createToken() (optional)\n     * https://stripe.com/docs/stripe-js/reference#stripe-create-token\n     * @type {Object}\n     */\n    cardData: { type: Object },\n\n    /**\n     * Error message from Stripe.\n     * @type {String}\n     * @readonly\n     */\n    error: { type: String },\n\n    /**\n     * If the form has an error.\n     * @type {Boolean}\n     * @readonly\n     */\n    hasError: { type: Boolean, attribute: 'has-error', reflect: true },\n\n    /**\n     * If the form is complete.\n     * @type {Boolean}\n     * @readonly\n     */\n    isComplete: { type: Boolean, attribute: 'is-complete', reflect: true },\n\n    /**\n     * If the form is empty.\n     * @type {Boolean}\n     * @readonly\n     */\n    isEmpty: { type: Boolean, attribute: 'is-empty', reflect: true },\n\n    /**\n     * Whether to hide icons in the Stripe form.\n     * @type {Boolean}\n     */\n    hideIcon: { type: Boolean, attribute: 'hide-icon' },\n\n    /**\n     * Whether or not to hide the postal code field.\n     * Useful when you gather shipping info elsewhere.\n     * @type {Boolean}\n     */\n    hidePostalCode: { type: Boolean, attribute: 'hide-postal-code' },\n\n    /**\n     * Stripe icon style. 'solid' or 'default'.\n     * @type {'solid'|'default'}\n     */\n    iconStyle: { type: String, attribute: 'icon-style' },\n\n    /**\n     * Stripe Publishable Key. EG. pk_test_XXXXXXXXXXXXXXXXXXXXXXXX\n     * @type {String}\n     */\n    publishableKey: { type: String, attribute: 'publishable-key' },\n\n    /**\n     * True when the stripe element is ready to receive focus.\n     * @type {Boolean}\n     * @readonly\n     */\n    stripeReady: { type: Boolean, attribute: 'stripe-ready', reflect: true },\n\n    /**\n     * Stripe token\n     * @type {Object}\n     * @readonly\n     */\n    token: { type: Object },\n\n    /**\n     * Prefilled values for form. Example {postalCode: '90210'}\n     * @type {Object}\n     */\n    value: { type: Object },\n\n    /**\n     * Stripe instance\n     * @type {Object}\n     * @readonly\n     */\n    stripe: { type: Object },\n\n    /**\n     * Stripe Elements instance\n     * @type {Object}\n     * @readonly\n     */\n    elements: { type: Object },\n  }\n\n  #brand = null;\n  get brand() { return this.#brand; }\n  set brand(_) { }\n\n  #card = null;\n  get card() { return this.#card; }\n  set card(_) { }\n\n  #error = null;\n  get error() { return this.#error; }\n  set error(_) { }\n\n  #hasError = false;\n  get hasError() { return this.#hasError; }\n  set hasError(_) { }\n\n  #isComplete = false;\n  get isComplete() { return this.#isComplete; }\n  set isComplete(_) { }\n\n  #isEmpty = true;\n  get isEmpty() { return this.#isEmpty; }\n  set isEmpty(_) { }\n\n  #stripeReady = false;\n  get stripeReady() { return this.#stripeReady; }\n  set stripeReady(_) { }\n\n  #token = null;\n  get token() { return this.#token; }\n  set token(_) { }\n\n  #stripe = null;\n  get stripe() { return this.#stripe; }\n  set stripe(_) { }\n\n  #elements = null;\n  get elements() { return this.#elements; }\n  set elements(_) { }\n\n  /**\n   * Breadcrumbs back up to the document.\n   * @type {Array}\n   */\n  #shadowHosts = [];\n\n  /**\n   * Mount Point Element id\n   * @type {String}\n   */\n  #stripeMountId = null;\n\n  /**\n   * Stripe Element mount point\n   * @type {Element}\n   */\n  get stripeMount() {\n    return document.getElementById(this.#stripeMountId);\n  };\n\n  get form () {\n    return this.querySelector('form');\n  }\n\n  static styles = [\n    style,\n  ];\n\n  /** LIFECYCLE */\n\n  /** @inheritdoc */\n  constructor() {\n    super();\n    this.action = '';\n    this.hideIcon = false;\n    this.hidePostalCode = false;\n    this.iconStyle = 'default';\n    this.value = {};\n  }\n\n  /** @inheritdoc */\n  connectedCallback() {\n    super.connectedCallback();\n    this.#fire('is-complete-changed', this.isComplete);\n    this.#fire('is-empty-changed', this.isEmpty);\n    this.#fire('has-error-changed', this.hasError);\n    this.#fire('brand-changed', this.brand);\n    this.#fire('card-changed', this.card);\n    this.#fire('error-changed', this.error);\n    this.#fire('publishable-key-changed', this.publishableKey);\n    this.#fire('stripe-ready-changed', this.stripeReady);\n    this.#fire('token-changed', this.token);\n    if (!document.getElementById('stripe-elements-custom-css-properties')) {\n      appendTemplate(stripeElementsCustomCssProperties, document.head);\n    }\n  }\n\n  /** @inheritdoc */\n  render() {\n    const { error } = this;\n    const { message: errorMessage = '' } = error || {};\n    return html`\n      <slot id=\"stripe-slot\" name=\"stripe-card\"></slot>\n      <div id=\"error\">${errorMessage}</div>\n    `;\n  }\n\n  /** @inheritdoc */\n  firstUpdated() {\n    this.#initMountPoints();\n  }\n\n  /** @inheritdoc */\n  updated(changed) {\n    if (changed.has('isComplete')) this.#fire('is-complete-changed', this.isComplete);\n    if (changed.has('isEmpty')) this.#fire('is-empty-changed', this.isEmpty);\n    if (changed.has('hasError')) this.#fire('has-error-changed', this.hasError);\n    if (changed.has('brand')) this.#fire('brand-changed', this.brand);\n    if (changed.has('card')) this.#fire('card-changed', this.card);\n    if (changed.has('stripeReady')) this.#fire('stripe-ready-changed', this.stripeReady);\n    if (changed.has('publishableKey')) {\n      this.#fire('publishable-key-changed', this.publishableKey);\n      this.#publishableKeyChanged(this.publishableKey);\n    }\n    if (changed.has('token')) {\n      const { token } = this;\n      this.#fire('token-changed', token);\n      this.dispatchEvent(new CustomEvent('stripe-token', { bubbles, composed, detail: token }));\n    }\n    if (changed.has('error')) {\n      this.#fire('error-changed', this.error);\n      this.#fireError(this.error);\n    }\n  }\n\n  /** PUBLIC API */\n\n  /**\n   * Checks for potential validity. A potentially valid form is one that\n   * is not empty, not complete and has no error. A validated form also counts\n   * as potentially valid.\n   * @return {Boolean} true if the Stripe form is potentially valid\n   */\n  isPotentiallyValid() {\n    return (!this.isComplete && !this.isEmpty && !this.hasError) || this.validate();\n  }\n\n  /** Resets the Stripe card. */\n  reset() {\n    this.#setError(null);\n    this.card && this.card.clear();\n  }\n\n  /**\n   * Submit credit card information to generate a token\n   */\n  submit() {\n    if (!this.stripe) throw new Error('Cannot submit before initializing Stripe');\n    if (!this.isComplete) return;\n    return this.stripe.createToken(this.#card, this.cardData)\n      .then(this.#handleResponse.bind(this))\n      .catch(this.#handleError.bind(this));\n  }\n\n  /**\n   * Checks if the Stripe form is valid.\n   * @return {Boolean} true if the Stripe form is valid\n   */\n  validate() {\n    const { isComplete, isEmpty, hasError, error } = this;\n    const isValid = !hasError && isComplete && !isEmpty;\n    if (!isValid && !hasError) {\n      this.#setError(\n          isEmpty ? 'Credit Card information is empty.'\n        : 'Credit card information is incomplete.'\n      )\n    }\n    return isValid;\n  }\n\n  /** PRIVATE METHODS */\n\n  /** Fires an event with a polymer-style changed event */\n  #fire(type, value) {\n    const detail = value ? { value } : undefined;\n    this.dispatchEvent(new CustomEvent(type, { bubbles, composed, detail }));\n  }\n\n  /** Fires an Error Event */\n  #fireError(error) {\n    this.dispatchEvent(new ErrorEvent('stripe-error', { bubbles, composed, error }));\n  }\n\n  /**\n   * Returns a Stripe-friendly style object computed from CSS custom properties\n   * @return {Object} Stripe Style initialization object.\n   */\n  #getStripeElementsStyles() {\n    const computedStyle = window.ShadyCSS ? null : getComputedStyle(this);\n    return allowedStyles.reduce((acc, style) => {\n      const dash = style.replace(/([A-Z])/g, g => `-${g[0].toLowerCase()}`);\n      Object.keys(acc).forEach(prefix => {\n        acc[prefix][style] = (\n          window.ShadyCSS\n            ? ShadyCSS.getComputedStyleValue(this, `--stripe-elements-${prefix}-${dash}`)\n            : computedStyle.getPropertyValue(`--stripe-elements-${prefix}-${dash}`)\n        ) || undefined;\n      });\n      return acc\n    }, { base: {}, complete: {}, empty: {}, invalid: {} });\n  }\n\n  /**\n   * Sets the error.\n   * @param  {Object} error\n   * @protected\n   */\n  #handleError(error) {\n    this.#setError(error.message)\n  }\n\n  /**\n   * Sets the token or error from the response.\n   * @param  {Object} response.error Stripe error\n   * @param  {Object} response.token Stripe token\n   * @protected\n   */\n  #handleResponse(response) {\n    if (response.error) {\n      this.#setError(response.error);\n    } else {\n      this.#setToken(response.token);\n      // Submit the form\n      if (this.action) this.querySelector('form').submit();\n    }\n    return response;\n  }\n\n  #initMountPoints() {\n    if (this.stripeMount) return;\n    else if (window.ShadyDOM) this.#initShadyDomMount();\n    else this.#initShadowDomMounts();\n  }\n\n  /** Prepares to mount Stripe Elements in light DOM. */\n  #initShadowDomMounts() {\n    // trace each shadow boundary between us and the document\n    let host = this;\n    this.#shadowHosts = [this];\n    // eslint-disable-next-line no-loops/no-loops\n    while (host = host.getRootNode().host) this.#shadowHosts.push(host);\n\n    // append mount point to first shadow host under document (as light child)\n    // and slot breadcrumbs to each shadowroot in turn, until our shadow host.\n\n    const { action, token } = this;\n    this.#stripeMountId = generateRandomMountElementId();\n    const id = this.#stripeMountId;\n    const mountTemplate = stripeCardTemplate({ action, id, token });\n    const slotTemplate =\n      html`<slot slot=\"stripe-card\" name=\"stripe-card\"></slot>`;\n\n    appendTemplate(mountTemplate, this.#shadowHosts.pop());\n    this.#shadowHosts.forEach(host => appendTemplate(slotTemplate, host));\n  }\n\n  /** Creates a mounting div for the shady dom stripe elements container */\n  #initShadyDomMount() {\n    const { action, token } = this;\n    this.#stripeMountId = generateRandomMountElementId();\n    const id = this.#stripeMountId;\n    const mountTemplate = stripeCardTemplate({ action, id, token });\n    appendTemplate(mountTemplate, this);\n  }\n\n  /**\n   * Initializes Stripe and elements.\n   * @param {String} publishableKey Stripe publishable key.\n   */\n  #initStripe() {\n    const oldStripe = this.#stripe;\n    const oldElements = this.#elements;\n    if (this.#stripe) this.#stripe = null;\n    if (!window.Stripe) {\n      const message = `<stripe-elements> requires Stripe.js to be loaded first.`\n      this.#setError({message})\n      // eslint-disable-next-line no-console\n      console.warn(message);\n    } else if (this.publishableKey) {\n      this.#stripe = Stripe(this.publishableKey);\n      this.#elements = this.#stripe.elements();\n    } else {\n      this.#elements = null;\n    }\n    this.requestUpdate('stripe', oldStripe)\n    this.requestUpdate('elements', oldElements)\n  }\n\n  /** Creates and mounts Stripe Elements card. */\n  #mountCard() {\n    const { hidePostalCode, hideIcon, iconStyle, value } = this;\n    const style = this.#getStripeElementsStyles();\n\n    this.#setCard(this.#elements.create('card', {\n      hideIcon,\n      hidePostalCode,\n      iconStyle,\n      style,\n      value,\n    }));\n\n    this.#card.mount(this.stripeMount);\n    this.#card.addEventListener('ready', this.#onReady.bind(this));\n    this.#card.addEventListener('change', this.#onChange.bind(this));\n  }\n\n  /**\n   * Sets the error.\n   * @param  {Boolean}       event.empty     true if value is empty\n   * @param  {Boolean}       event.complete  true if value is well-formed and potentially complete.\n   * @param  {String}        event.brand     brand of the card being entered e.g. 'visa' or 'amex'\n   * @param  {Object}        event.error     The current validation error, if any.\n   * @param  {String|Object} event.value     Value of the form. Only non-sensitive information e.g. postalCode is present.\n   */\n  #onChange(event) {\n    const { empty, complete, brand, error, value } = event;\n    this.#setError(error)\n    this.#setBrand(brand)\n    this.#setIsComplete(complete);\n    this.#setIsEmpty(empty);\n    this.dispatchEvent(new CustomEvent('stripe-change', { detail: event }));\n  }\n\n  /**\n   * Sets the stripeReady property when the stripe element is ready to receive focus.\n   * @param  {Event} event\n   */\n  #onReady(event) {\n    this.#setStripeReady(true);\n    this.#fire('stripe-ready');\n  }\n\n  /**\n   * Reinitializes Stripe and mounts the card.\n   * @param  {String} publishableKey Stripe publishable key\n   */\n  #publishableKeyChanged(publishableKey) {\n    this.#unmountCard();\n    this.#setStripeReady(false);\n    if (!this.stripeMount || !this.form) this.#resetMount();\n    this.#initStripe();\n    if (publishableKey && this.stripe) this.#mountCard();\n  }\n\n  #removeMountPoints() {\n    this.#shadowHosts.forEach(removeAllMounts)\n    removeEl(this.stripeMount);\n  }\n\n  #resetMount() {\n    this.#removeMountPoints();\n    this.#initMountPoints();\n  }\n\n  /** Unmounts and nullifies the card. */\n  #unmountCard() {\n    if (this.card) this.card.unmount();\n    this.#setCard(null);\n  }\n\n  /** READONLY SETTERS */\n\n  #setBrand(newVal) {\n    const oldBrand = this.#brand\n    this.#brand = newVal;\n    this.requestUpdate('brand', oldBrand);\n  }\n\n  #setCard(newVal) {\n    const oldCard = this.#card;\n    this.#card = newVal;\n    this.requestUpdate('card', oldCard);\n  }\n\n  #setError(newVal) {\n    const oldError = this.#error;\n    this.#error = newVal;\n    this.requestUpdate('error', oldError);\n    const oldHasError = this.#hasError;\n    this.#hasError = !!newVal;\n    this.requestUpdate('hasError', oldHasError);\n  }\n\n  #setIsComplete(newVal) {\n    const oldIsComplete = this.#isComplete;\n    this.#isComplete = newVal;\n    this.requestUpdate('isComplete', oldIsComplete);\n  }\n\n  #setIsEmpty(newVal) {\n    const oldIsEmpty = this.#isEmpty;\n    this.#isEmpty = newVal;\n    this.requestUpdate('isEmpty', oldIsEmpty);\n  }\n\n  #setStripeReady(newVal) {\n    const oldStripeReady = this.#stripeReady;\n    this.#stripeReady = newVal;\n    this.requestUpdate('stripeReady', oldStripeReady);\n  }\n\n  #setToken(newVal) {\n    const oldToken = this.#token;\n    this.#token = newVal;\n    this.requestUpdate('token', oldToken);\n  }\n}\n"],"mappings":"AAAA;;;;;;;ACgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;;;;;;;AASA;;AAEA;AACA;AACA;;;AAKA;;AAuTA;AAKA","sourceRoot":""}