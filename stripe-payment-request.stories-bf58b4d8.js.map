{"version":3,"file":"stripe-payment-request.stories-bf58b4d8.js","sources":["../stripe-payment-request.js","../stories/stripe-payment-request.stories.mdx"],"sourcesContent":["import _toArray from '@babel/runtime/helpers/esm/toArray';\nimport _getPrototypeOf from '@babel/runtime/helpers/esm/getPrototypeOf';\nimport _get from '@babel/runtime/helpers/esm/get';\nimport '@morbidick/lit-element-notify';\nimport { css, property } from 'lit-element';\nimport { S as StripeBase, s as sharedStyles, c as camel, b as bound, m as mapDataset, a as mapProps } from './shared.js';\nimport 'lit-html/directives/if-defined';\nimport '@babel/runtime/helpers/esm/defineProperty';\nimport '@typed/curry';\nimport 'lit-html';\nimport '@lavadrop/kebab-case';\nimport '@lavadrop/camel-case';\nimport '@pacote/memoize';\n\nfunction throwResponseError(response) {\n  if (response.error) throw response.error;else return response;\n}\n\nconst unary = f => x => f(x);\n\nvar style = css`#stripe {\n  box-sizing: border-box;\n  min-width: var(--stripe-payment-request-element-min-width, 300px);\n  padding: var(--stripe-payment-request-element-padding, 8px 12px);\n  background: var(--stripe-payment-request-element-background, white);\n}\n`;\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function () { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function (O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function (F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function (receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function (elements, decorators) { var newElements = []; var finishers = []; var placements = { static: [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function (element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function (element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function (elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function (element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function (elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function (elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function (elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function (elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function (obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function (constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function (obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def.static ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function (other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst parseAmount = mapProps({\n  amount: unary(parseInt)\n});\nconst parseDataset = mapDataset(parseAmount);\n/**\n * Custom element wrapper for Stripe.js v3 Payment Request Buttons.\n *\n * 👨‍🎨 [Live Demo](https://bennypowers.dev/stripe-elements/?path=/docs/stripe-payment-request--enter-a-stripe-publishable-key) 👀\n *\n * ### 🧙‍♂️ Usage\n * If you prebuilt with Snowpack, load the module from your `web_modules` directory\n *\n * ```html\n * <script type=\"module\" src=\"/web_modules/@power-elements/stripe-elements/stripe-payment-request.js\"></script>\n * ```\n *\n * Alternatively, load the module from the unpkg CDN\n * ```html\n * <script type=\"module\" src=\"https://unpkg.com/@power-elements/stripe-elements/stripe-payment-request.js?module\"></script>\n * ```\n *\n * Then you can add the element to your page.\n *\n * ```html\n *\n * <stripe-payment-request id=\"payment-request\"\n *     publishable-key=\"pk_test_XXXXXXXXXXXXXXXXXXXXXXXX\"\n *     generate=\"token\"\n *     action=\"/charges\"\n *     country=\"CA\"\n *     currency=\"cad\"\n *     amount=\"1000\"\n *     label=\"Ten Bones\"\n *     request-payer-name\n *     request-payer-email\n *     request-payer-phone\n * ></stripe-payment-request>\n * ```\n *\n * See the demos for more comprehensive examples.\n *   - Using `<stripe-payment-request>` with [plain HTML and JavaScript](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-vanilla--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in a [LitElement](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-litelement--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in a [Vue Component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-vue--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in an [Angular component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-angular--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in a [React component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-react--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in a [Preact component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-preact--stripe-payment-request).\n *\n * @cssprop [--stripe-payment-request-element-min-width] - min-width property of the container element. Default `300px`\n * @cssprop [--stripe-payment-request-element-padding] - padding property of the container element. Default `8px 12px`\n * @cssprop [--stripe-payment-request-element-background] - background property of the container element. Default `white`\n *\n * @element stripe-payment-request\n * @extends StripeBase\n *\n * @fires 'unsupported' - When the element detects that the user agent cannot make a payment\n * @fires 'fail' - When a payment request fails\n * @fires 'cancel' - When a payment request is cancelled\n * @fires 'shippingaddresschange' - When the user chooses a different shipping address\n * @fires 'shippingoptionchange' - When the user chooses a different shipping option\n */\n\nlet StripePaymentRequest = _decorate(null, function (_initialize, _StripeBase) {\n  class StripePaymentRequest extends _StripeBase {\n    constructor(...args) {\n      super(...args);\n\n      _initialize(this);\n    }\n\n  }\n\n  return {\n    F: StripePaymentRequest,\n    d: [{\n      kind: \"field\",\n      static: true,\n      key: \"is\",\n\n      value() {\n        return 'stripe-payment-request';\n      }\n\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n\n      value() {\n        return [sharedStyles, style];\n      }\n\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number,\n        reflect: true\n      })],\n      key: \"amount\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: 'can-make-payment',\n        reflect: true,\n        readOnly: true,\n        notify: true\n      })],\n      key: \"canMakePayment\",\n\n      value() {\n        return undefined;\n      }\n\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String\n      })],\n      key: \"country\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String\n      })],\n      key: \"currency\",\n      value: void 0\n    }, {\n      kind: \"get\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"displayItems\",\n      value:\n      /**\n       * The amount in the currency's subunit (e.g. cents, yen, etc.)\n       * @type {number}\n       */\n\n      /**\n       * Whether or not the device can make the payment request.\n       * @type {object}\n       * @readonly\n       */\n\n      /**\n       * The two-letter country code of your Stripe account (e.g., `US`)\n       * @type {string}\n       */\n\n      /**\n       * Three character currency code (e.g., `usd`)\n       * @type {string}\n       */\n\n      /**\n       * An array of DisplayItem objects. These objects are shown as line items in the browser’s payment interface. Note that the sum of the line item amounts does not need to add up to the total amount above.\n       * @type {stripe.paymentRequest.DisplayItem[]}\n       */\n      function displayItems() {\n        const value = this.__displayItems;\n        return Array.isArray(value) ? value : this.parseDatasets('stripe-display-item');\n      }\n    }, {\n      kind: \"set\",\n      key: \"displayItems\",\n      value: function displayItems(value) {\n        const oldValue = this.displayItems;\n        /** @private */\n\n        this.__displayItems = value;\n        this.requestUpdate('displayItems', oldValue);\n      }\n      /**\n       * A name that the browser shows the customer in the payment interface.\n       * @type {string}\n       */\n\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String,\n        reflect: true\n      })],\n      key: \"label\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Object,\n        notify: true,\n        readOnly: true,\n        attribute: 'payment-intent'\n      })],\n      key: \"paymentIntent\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Object,\n        attribute: 'payment-request',\n        readOnly: true\n      })],\n      key: \"paymentRequest\",\n\n      value() {\n        return null;\n      }\n\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"pending\",\n\n      value() {\n        return false;\n      }\n\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: 'request-payer-email'\n      })],\n      key: \"requestPayerEmail\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: 'request-payer-name'\n      })],\n      key: \"requestPayerName\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: 'request-payer-phone'\n      })],\n      key: \"requestPayerPhone\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: 'request-shipping'\n      })],\n      key: \"requestShipping\",\n      value: void 0\n    }, {\n      kind: \"get\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"shippingOptions\",\n      value:\n      /**\n       * Stripe PaymentIntent\n       * @type {stripe.paymentIntents.PaymentIntent}\n       * @readonly\n       */\n\n      /**\n       * Stripe PaymentRequest\n       * @type {stripe.paymentRequest.StripePaymentRequest}\n       */\n\n      /**\n       * If you might change the payment amount later (for example, after you have calcluated shipping costs), set this to true. Note that browsers treat this as a hint for how to display things, and not necessarily as something that will prevent submission.\n       * @type {boolean}\n       */\n\n      /**\n       * See the requestPayerName option.\n       * @type {boolean}\n       */\n\n      /**\n       * By default, the browser‘s payment interface only asks the customer for actual payment information. A customer name can be collected by setting this option to true. This collected name will appears in the PaymentResponse object.\n       *\n       * We highly recommend you collect at least one of name, email, or phone as this also results in collection of billing address for Apple Pay. The billing address can be used to perform address verification and block fraudulent payments. For all other payment methods, the billing address is automatically collected when available.\n       * @type {boolean}\n       */\n\n      /**\n       * See the requestPayerName option.\n       * @type {boolean}\n       */\n\n      /**\n       * Collect shipping address by setting this option to true. The address appears in the PaymentResponse.\n       * You must also supply a valid [ShippingOptions] to the shippingOptions property. This can be up front at the time stripe.paymentRequest is called, or in response to a shippingaddresschange event using the updateWith callback.\n       * @type {boolean}\n       */\n\n      /**\n       * An array of ShippingOption objects. The first shipping option listed appears in the browser payment interface as the default option.\n       * @type {stripe.paymentRequest.ShippingOption[]}\n       */\n      function shippingOptions() {\n        const value = this.__shippingOptions;\n        return Array.isArray(value) ? value : this.parseDatasets('stripe-shipping-option');\n      }\n    }, {\n      kind: \"set\",\n      key: \"shippingOptions\",\n      value: function shippingOptions(value) {\n        const oldValue = this.shippingOptions;\n        /** @private */\n\n        this.__shippingOptions = value;\n        this.requestUpdate('shippingOptions', oldValue);\n      }\n      /**\n       * @type {'default'|'book'|'buy'|'donate'}\n       */\n\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String,\n        attribute: 'button-type'\n      })],\n      key: \"buttonType\",\n\n      value() {\n        return 'default';\n      }\n\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String,\n        attribute: 'button-theme'\n      })],\n      key: \"buttonTheme\",\n\n      value() {\n        return 'dark';\n      }\n\n    }, {\n      kind: \"method\",\n      key: \"reset\",\n      value:\n      /**\n       * @type {'dark'|'light'|'light-outline'}\n       */\n\n      /* PUBLIC API */\n      function reset() {\n        _get(_getPrototypeOf(StripePaymentRequest.prototype), \"reset\", this).call(this);\n\n        this.set({\n          paymentIntent: null\n        });\n      }\n      /* LIFECYCLE */\n\n      /** @inheritdoc */\n\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changed) {\n        _get(_getPrototypeOf(StripePaymentRequest.prototype), \"updated\", this).call(this, changed);\n\n        if (changed.has('generate')) this.initPaymentRequestListeners();\n      }\n      /* PRIVATE API */\n\n      /**\n       * Creates a StripePaymentRequestOptions object.\n       * @return {stripe.paymentRequest.StripePaymentRequestOptions} [description]\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"getStripePaymentRequestOptions\",\n      value: function getStripePaymentRequestOptions() {\n        const {\n          country,\n          currency,\n          displayItems,\n          shippingOptions,\n          requestPayerEmail,\n          requestPayerName,\n          requestPayerPhone,\n          label,\n          amount\n        } = this;\n        const total = {\n          label,\n          amount\n        };\n        return {\n          country,\n          currency,\n          displayItems,\n          requestPayerEmail,\n          requestPayerName,\n          requestPayerPhone,\n          shippingOptions,\n          total\n        };\n      }\n      /**\n       * Initializes the PaymentRequest Object.\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"initElement\",\n      value: async function initElement() {\n        await this.initPaymentRequest();\n        await this.initPaymentRequestListeners();\n        await this.initPaymentRequestButton();\n      }\n      /**\n       * Initialized the `PaymentRequest` object.\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"initPaymentRequest\",\n      value: async function initPaymentRequest() {\n        if (!this.stripe) return;\n        const stripePaymentRequestOptions = this.getStripePaymentRequestOptions();\n        const paymentRequest = this.stripe.paymentRequest(stripePaymentRequestOptions);\n        const canMakePayment = await paymentRequest.canMakePayment();\n        await this.set({\n          paymentRequest,\n          canMakePayment\n        });\n        if (!this.canMakePayment) this.fire('unsupported');\n      }\n      /**\n       * Creates Stripe Payment Request Element.\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"initPaymentRequestButton\",\n      value: async function initPaymentRequestButton() {\n        const {\n          buttonTheme: theme,\n          buttonType: type,\n          canMakePayment,\n          paymentRequest\n        } = this;\n        if (!canMakePayment) return;\n        const computedStyle = window.ShadyCSS ? undefined : getComputedStyle(this);\n        const propertyName = '--stripe-payment-request-button-height';\n        const height = this.getCSSCustomPropertyValue(propertyName, computedStyle) || '40px';\n        const style = {\n          paymentRequestButton: {\n            height,\n            theme,\n            type\n          }\n        };\n        const options = {\n          paymentRequest,\n          style\n        };\n        const element = this.elements.create('paymentRequestButton', options);\n        await this.set({\n          element\n        });\n      }\n      /**\n       * Attaches listeners to the `PaymentRequest` object.\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"initPaymentRequestListeners\",\n      value: async function initPaymentRequestListeners() {\n        if (!this.canMakePayment) return;\n        const stripeEvent = camel(this.generate).toLowerCase();\n        this.paymentRequest.on(stripeEvent, this.onPaymentResponse);\n        this.paymentRequest.on('cancel', this.onCancel);\n        this.paymentRequest.on('shippingaddresschange', this.onShippingaddresschange);\n        this.paymentRequest.on('shippingoptionchange', this.onShippingoptionchange);\n      }\n      /**\n       * Handle a `cancel` event\n       * @param  {StripeCancelEvent} originalEvent\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      decorators: [bound],\n      key: \"onCancel\",\n      value: function onCancel(originalEvent) {\n        this.fire('cancel', originalEvent);\n      }\n      /**\n       * Completes the PaymentRequest. If a confirmation error is passed in the second argument,\n       * will throw that error\n       * @param {PaymentResponse} paymentResponse\n       * @param {stripe.Error} [confirmationError] error from Stripe#confirmCardPayment. Should be thrown so that element state remains sane.\n       * @resolvees {PaymentResponse}\n       * @sideeffect\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      decorators: [bound],\n      key: \"complete\",\n      value: async function complete(paymentResponse, confirmationError) {\n        const {\n          error: paymentResponseError\n        } = paymentResponse;\n        const status = paymentResponseError || confirmationError ? 'fail' : 'success';\n        paymentResponse.complete(status);\n        this.fire(status, paymentResponse);\n        return confirmationError ? {\n          error: confirmationError\n        } : paymentResponse;\n      }\n      /**\n       * Handle a paymentResponse from Stripe\n       * @param  {PaymentResponse}  paymentResponse stripe PaymentResponse paymentResponse\n       * @resolves {PaymentResponse}\n       * @rejects {stripe.Error|Error}\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      decorators: [bound],\n      key: \"onPaymentResponse\",\n      value: async function onPaymentResponse(paymentResponse) {\n        const {\n          clientSecret,\n          confirmPaymentIntent,\n          complete\n        } = this;\n        const {\n          error = null,\n          paymentMethod = null,\n          source = null,\n          token = null\n        } = paymentResponse;\n        await this.set({\n          error,\n          paymentMethod,\n          source,\n          token\n        });\n        const isPaymentIntent = clientSecret && !error;\n        return isPaymentIntent ? confirmPaymentIntent(paymentResponse) : complete(paymentResponse);\n      }\n      /**\n       * When a PaymentIntent client secret is set, confirm the payment\n       * @param {PaymentResponse} paymentResponse\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      decorators: [bound],\n      key: \"confirmPaymentIntent\",\n      value: async function confirmPaymentIntent(paymentResponse) {\n        const confirmCardData = {\n          payment_method: this.paymentMethod.id\n        };\n        const {\n          error = null,\n          paymentIntent = null\n        } = await this.confirmCardPayment(confirmCardData, {\n          handleActions: false\n        }).then(({\n          error: confirmationError\n        }) => this.complete(paymentResponse, confirmationError)) // throws if first confirm errors\n        .then(throwResponseError).then(() => this.confirmCardPayment()).then(throwResponseError).catch(error => ({\n          error\n        })); // catch error from first confirm\n\n        await this.set({\n          error,\n          paymentIntent\n        });\n      }\n      /**\n       * Stripe confirmCardPayment method\n       * @param {stripe.ConfirmCardPaymentData} data\n       * @param {stripe.ConfirmCardPaymentOptions} options\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      decorators: [bound],\n      key: \"confirmCardPayment\",\n      value: async function confirmCardPayment(data, options) {\n        return this.stripe.confirmCardPayment(this.clientSecret, data, options);\n      }\n      /**\n       * @param {ShippingAddressChangeEvent} originalEvent\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      decorators: [bound],\n      key: \"onShippingaddresschange\",\n      value: function onShippingaddresschange(originalEvent) {\n        this.fire('shippingaddresschange', originalEvent);\n      }\n      /**\n       * @param {ShippingOptionChangeEvent} originalEvent\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      decorators: [bound],\n      key: \"onShippingoptionchange\",\n      value: function onShippingoptionchange(originalEvent) {\n        this.fire('shippingoptionchange', originalEvent);\n      }\n      /**\n       * Parses an element's dataset number props from string to number\n       * @param {String} selector\n       * @return {Object}\n       * @private\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"parseDatasets\",\n      value: function parseDatasets(selector) {\n        const elements = [...this.querySelectorAll(selector)];\n        return !elements.length ? undefined : elements.map(parseDataset);\n      }\n    }]\n  };\n}, StripeBase);\n/**\n * @typedef {Object} ShippingAddressChangeEvent\n * @param {(options: stripe.paymentRequest.UpdateDetails) => void} updateWith\n * @param {stripe.paymentRequest.ShippingAddress} shippingAddress\n */\n\n/**\n * @typedef {Object} ShippingOptionChangeEvent\n * @param {(options: stripe.paymentRequest.UpdateDetails) => void} updateWith\n * @param {stripe.paymentRequest.ShippingOption} shippingOption\n */\n\n/** @typedef {stripe.Error|stripe.PaymentIntentResponse|stripe.Token|stripe.Source} PaymentResponseOrError */\n\n/** @typedef {(x: PaymentResponseOrError) => PaymentResponseOrError} PaymentResponseHandler */\n\n/** @typedef {stripe.paymentRequest.StripeSourcePaymentResponse|stripe.paymentRequest.StripeTokenPaymentResponse|stripe.paymentRequest.StripePaymentMethodPaymentResponse} PaymentResponse */\n\ncustomElements.define(StripePaymentRequest.is, StripePaymentRequest);\n\nexport { StripePaymentRequest };\n//# sourceMappingURL=stripe-payment-request.js.map\n","import {\n  html,\n  Meta,\n  Preview,\n  Props,\n  Story,\n  withKnobs,\n  withWebComponentsKnobs,\n} from '@open-wc/demoing-storybook';\n\nimport { ifDefined } from 'lit-html/directives/if-defined';\n\nimport '../stripe-payment-request.js';\n\nimport '@power-elements/json-viewer';\nimport '@material/mwc-textfield';\n\nimport { $$, publishableKey, setClientSecrets, setKeys } from './storybook-helpers.js';\n\n<Meta title=\"Elements/Stripe Payment Request\" />\n\n# `<stripe-payment-request>` Web Component\n\nThe `<stripe-payment-request>` custom element is an easy way to use stripe.js in your web app,\nacross [frameworks](/?path=/docs/framework-examples-angular--stripe-elements), or inside shadow roots.\nAdd the element to your page with the `publishable-key` attribute set to your\n[Stripe publishable key](https://dashboard.stripe.com/account/apikeys).\nYou can also set the `publishableKey` DOM property using JavaScript.\n\nEnter your publishable key here (use the test key, not the production key) to run the examples against your Stripe account.\n\n<Story name=\"Enter a Publishable Key\" height=\"80px\">{html`\n  <mwc-textfield\n    outlined\n    helperpersistent\n    label=\"Publishable Key\"\n    helper=\"NOTE: the input will store the publishable key in localstorage for your convenience.\"\n    value=\"${publishableKey}\"\n    @change=\"${setKeys('stripe-payment-request')}\"\n  > </mwc-textfield>`\n}</Story>\n\nUnlike the `<stripe-elements>` element, `<stripe-payment-request>` has a number of up-front requirements.\nThe first of those is browser support.\nListen for the `unsupported` event to handle the case when the user agent cannot make the payment.\nListen for the `ready` event to be sure that the browser is able to make payment.\n\nYou also need to preload the element with information about the payment request in order for it to render to the page.\n\n> **Careful!** never add your **secret key** to an HTML page, only publish your **publishable key**.\n\nFor example, to display a payment request button to request a payment to a Canadian Stripe account\nfor a purchase labelled \"Double Double\" that costs $1.25 Canadian, add this element to your page:\n\n<Preview withSource=\"open\">\n  <Story name=\"Simple Payment Request\">{\n      html`\n        <payment-request-demo>\n          <stripe-payment-request\n              publishable-key=\"${publishableKey}\"\n              generate=\"source\"\n              amount=\"125\"\n              label=\"Double Double\"\n              country=\"CA\"\n              currency=\"cad\">\n          </stripe-payment-request>\n        </payment-request-demo>\n      `\n  }</Story>\n</Preview>\n\nYou can also display multiple line-items with the `<stripe-payment-item>` element:\n\n<Preview withSource=\"open\">\n  <Story name=\"Payment Request with Display Items\">{\n    html`\n      <payment-request-demo>\n        <stripe-payment-request\n            publishable-key=\"${publishableKey}\"\n            generate=\"token\"\n            amount=\"326\"\n            label=\"Double Double\"\n            country=\"CA\"\n            currency=\"cad\">\n          <stripe-display-item data-amount=\"125\" data-label=\"Double Double\"> </stripe-display-item>\n          <stripe-display-item data-amount=\"199\" data-label=\"Box of 10 Timbits\"> </stripe-display-item>\n        </stripe-payment-request>\n      </payment-request-demo>\n    `\n  }</Story>\n</Preview>\n\nTo add multiple shipping options, you can use the `<stripe-shipping-option>` element:\n\n<Preview withSource=\"open\">\n  <Story name=\"Payment Request with Display Items and Shipping Options\">{\n    html`\n      <payment-request-demo>\n        <stripe-payment-request\n            publishable-key=\"${publishableKey}\"\n            generate=\"payment-method\"\n            request-payer-name\n            request-payer-email\n            request-payer-phone\n            amount=\"326\"\n            label=\"Double Double\"\n            country=\"CA\"\n            currency=\"cad\">\n          <stripe-display-item data-amount=\"125\" data-label=\"Double Double\"> </stripe-display-item>\n          <stripe-display-item data-amount=\"199\" data-label=\"Box of 10 Timbits\"> </stripe-display-item>\n          <stripe-shipping-option data-id=\"pick-up\" data-label=\"Pick Up\" data-detail=\"Pick Up at Your Local Timmy's\" data-amount=\"0\"> </stripe-shipping-option>\n          <stripe-shipping-option data-id=\"delivery\" data-label=\"Delivery\" data-detail=\"Timbits to Your Door\" data-amount=\"200\"> </stripe-shipping-option>\n        </stripe-payment-request>\n      </payment-request-demo>\n    `\n  }</Story>\n</Preview>\n\nYou may also set the payment request options using JavaScript:\n\n```js\nconst el = document.querySelector('stripe-payment-request');\n\nel.displayItems = [\n  { amount: '125', label: 'Double Double' },\n  { amount: '199', label: 'Box of 10 Timbits' },\n]\n\nel.shippingOptions = [\n  { id: 'pick-up',  amount: 0,   label: 'Pick Up',  detail: \"Pick Up at Your Local Timmy's\" },\n  { id: 'delivery', amount: 200, label: 'Delivery', detail: 'Timbits to Your Door' }\n]\n```\n\n## PaymentIntents\n\nStripe provides a PaymentIntent API which is both more secure and more compatible with EU regulations.\nTo take advantage of those features, generate a `PaymentIntent` object on your server and\npass it's `client_secret` property to the `<stripe-payment-request>` element.\n\nYou can generate one quickly using the stripe cli:\n\n```bash\nstripe payment_intents create --amount=326 --currency=cad | jq -r '.client_secret'\n```\n\nEnter your client secret to run the examples.\n\n<Story name=\"Enter a Client Secret\" height=\"80px\">\n  {html`\n    <mwc-textfield id=\"client-secret-input\" outlined label=\"Client Secret\" @change=\"${setClientSecrets('.uses-client-secret stripe-payment-request')}\"> </mwc-textfield>`\n  }\n</Story>\n\n\n<Preview withSource=\"open\">\n  <Story name=\"Payment Request with Payment Intent\">{\n    html`\n      <payment-request-demo class=\"uses-client-secret\">\n        <stripe-payment-request\n            publishable-key=\"${publishableKey}\"\n            generate=\"payment-method\"\n            client-secret=\"pi_XXXXXXXXXXXXXXXXXXXXXXXX_secret_XXXXXXXXXXXXXXXXXXXXXXXXX\"\n            request-payer-name\n            request-payer-email\n            request-payer-phone\n            amount=\"326\"\n            label=\"Double Double\"\n            country=\"CA\"\n            currency=\"cad\">\n        </stripe-payment-request>\n      </payment-request-demo>\n    `\n  }</Story>\n</Preview>\n\n## API\n\n<Props of=\"stripe-payment-request\" />\n"],"names":["throwResponseError","response","error","layoutProps","MDXContent","components","props","mdx","mdxType","Meta","title","parentName","Story","name","height","html","publishableKey","setKeys","Preview","withSource","setClientSecrets","Props","of","isMDXComponent","enterAPublishableKey","story","parameters","mdxSource","simplePaymentRequest","paymentRequestWithDisplayItems","paymentRequestWithDisplayItemsAndShippingOptions","enterAClientSecret","paymentRequestWithPaymentIntent","componentMeta","includeStories","mdxStoryNameToKey","docs","page","AddContext","mdxComponentMeta"],"mappings":"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"}